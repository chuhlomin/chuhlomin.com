{{ define "search" }}
{{ $langSuffix := "" }}
{{ if eq . "ru" }}{{ $langSuffix = "?lang=ru" }}{{ end }}
<script>
const client = new MeiliSearch({
    host: "{{ config "SearchHost" }}",
    apiKey: "{{ config "SearchAPIKey" }}",
});

const createNode = (elem) => {
    return document.createElement(elem);
};

const appendNode = (parent, elem) => {
    parent.appendChild(elem);
}

function search(query) {
    client.index("{{ . }}")
        .search(query)
        .then((data) => {
            if (data == null || data.hits == undefined || data.hits.length == 0) {
                document.getElementById("search_results").innerHTML = "{{ i18n "search_no_results" . }}";
                return
            }

            let results = document.getElementById("search_results");
            results.innerHTML = "";
            var counter = 0;

            for (var i = 0; i < data.hits.length; i++) {
                let file = data.hits[i];

                let resultLine = createNode("div");
                resultLine.className = "result";

                let postCard = createNode("div");
                postCard.className = "postCard";

                let imageWrapper = createNode("div");
                imageWrapper.className = "image";

                let imageLink = createNode("a");
                imageLink.href = file.Canonical;

                thumbs = file.Images;
                if (thumbs.length > 0) {
                    let image = createNode("img");
                    image.src = "/" + thumbs[0].ThumbPath;
                    appendNode(imageLink, image);
                    appendNode(imageWrapper, imageLink);
                    appendNode(postCard, imageWrapper);
                }

                let postTitle = createNode("div");
                postTitle.className = "titleAndTags";

                let link = createNode("a");
                link.href = file.Canonical;
                link.innerHTML = file.Title;
                appendNode(postTitle, link);
                appendNode(postTitle, document.createTextNode(" "));

                let tags = createNode("span")
                tags.className = "tags";
                // iterate over file.Tags
                for (var j = 0; j < file.Tags.length; j++) {
                    let tag = createNode("a");
                    tag.href = "/blog/{{ $langSuffix }}" + "#" + file.Tags[j];
                    tag.className = "tag";
                    tag.innerHTML = "#" + file.Tags[j];
                    appendNode(tags, tag);
                    appendNode(tags, document.createTextNode(" "));
                }

                appendNode(postTitle, tags);
                appendNode(postCard, postTitle);

                let postDate = createNode("div");
                postDate.className = "date";
                postDate.innerHTML = file.Date;
                appendNode(postCard, postDate);

                appendNode(resultLine, postCard);

                {{/* for (const field in result.fragments) {
                    if (field == "Markdown") {
                        for (var j = 0; j < result.fragments[field].length; j++) {
                            let fragment = createNode("div");
                            fragment.className = "fragment";
                            fragment.innerHTML = result.fragments[field][j];
                            appendNode(resultLine, fragment);
                        }
                    }
                } */}}

                appendNode(results, resultLine);
            }
        })
        .catch(err => {
            console.error('Error: ', err);
        });
}
</script>
{{ end }}
