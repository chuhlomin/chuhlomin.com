{{ define "search" }}
{{ $langSuffix := "" }}
{{ if eq . "ru" }}{{ $langSuffix = "?lang=ru" }}{{ end }}
<script>
const client = new MeiliSearch({
    host: "{{ config "SearchHost" }}",
    apiKey: "{{ config "SearchAPIKey" }}",
});

const createNode = (elem) => {
    return document.createElement(elem);
};

const appendNode = (parent, elem) => {
    parent.appendChild(elem);
}

function escape(html) {
    // escape all tags except <mark> and </mark>
    return html.replace(/<(?!\/?mark>)/g, "&lt;");
}

function search(query) {
    client.index("{{ . }}")
        .search(query, {
            attributesToRetrieve: ["Title", "Markdown", "Tags", "Images", "Date", "Canonical"],
            attributesToHighlight: ["Title", "Markdown", "Tags"],
            attributesToCrop: ["Markdown"],
            cropLength: 10,
            highlightPreTag: '<mark>',
            highlightPostTag: '</mark>'
        })
        .then((data) => {
            if (data == null || data.hits == undefined || data.hits.length == 0) {
                document.getElementById("search_results").innerHTML = "{{ i18n "search_no_results" . }}";
                return
            }

            let results = document.getElementById("search_results");
            results.innerHTML = "";
            var counter = 0;

            for (var i = 0; i < data.hits.length; i++) {
                let file = data.hits[i];

                let resultLine = createNode("div");
                resultLine.className = "result";

                let postCard = createNode("div");
                postCard.className = "postCard";

                let imageWrapper = createNode("div");
                imageWrapper.className = "image";

                let imageLink = createNode("a");
                imageLink.href = file.Canonical;

                thumbs = file.Images;
                if (thumbs != null && thumbs.length > 0 /* and thumbs[0] is not SVG */ && thumbs[0].ThumbPath.indexOf(".svg") == -1) {
                    let image = createNode("img");
                    image.src = "{{ config "RootURL" }}" + thumbs[0].ThumbPath;
                    appendNode(imageLink, image);
                }
                appendNode(imageWrapper, imageLink);
                appendNode(postCard, imageWrapper);

                let postTitle = createNode("div");
                postTitle.className = "titleAndTags";

                let link = createNode("a");
                link.href = file.Canonical;
                link.innerHTML = file._formatted.Title;
                appendNode(postTitle, link);
                appendNode(postTitle, document.createTextNode(" "));

                let tagsEl = createNode("span")
                tagsEl.className = "tags";
                let tags = file._formatted.Tags;
                if (tags != undefined) {
                    for (var j = 0; j < tags.length; j++) {
                        let tag = createNode("a");
                        tag.href = "/blog/{{ $langSuffix }}" + "#" + file.Tags[j];
                        tag.className = "tag";
                        tag.innerHTML = "#" + tags[j];
                        appendNode(tagsEl, tag);
                        appendNode(tagsEl, document.createTextNode(" "));
                    }
                }

                appendNode(postTitle, tagsEl);
                appendNode(postCard, postTitle);

                let postDate = createNode("div");
                postDate.className = "date";
                postDate.innerHTML = file.Date;
                appendNode(postCard, postDate);

                appendNode(resultLine, postCard);

                let fragment = createNode("pre");
                fragment.className = "fragment";
                fragment.innerHTML = escape(file._formatted.Markdown.replace(/^\n/, ""));
                if (fragment.innerHTML != "â€¦") {
                    appendNode(resultLine, fragment);
                }

                appendNode(results, resultLine);
            }
        })
        .catch(err => {
            console.error('Error: ', err);
        });
}
</script>
{{ end }}
